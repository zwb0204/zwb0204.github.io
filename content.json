{"meta":{"title":"Blutooth Space","subtitle":"bluetooth technolgoy & development","description":"","author":"Harry Zhang","url":"http://yoursite.com","root":"/"},"pages":[{"title":"����","date":"2020-06-26T01:25:53.000Z","updated":"2020-06-26T01:27:46.311Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"��ǩ","date":"2020-06-26T01:25:29.000Z","updated":"2020-06-26T01:27:08.272Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Hexo user guide","slug":"Hexo user guide","date":"2020-06-24T03:30:39.345Z","updated":"2020-06-26T01:41:15.584Z","comments":true,"path":"2020/06/24/Hexo user guide/","link":"","permalink":"http://yoursite.com/2020/06/24/Hexo%20user%20guide/","excerpt":"","text":"Hexo user guide[TOC] Build Private Blog搭建过程参考文章：https://zhuanlan.zhihu.com/p/32957389 USER Guide 更新个人信息，在根目录的_config.yml 中更新博客名字，作者，git 仓库地址等等。 将写好的文章直接放在目录：source/_posts下面 使用命令： hexo g // 如果有变动，执行命令生成 hexo s // 本地预览命令 hexo server -p 5000 // 如果4000端口被占用，则使用此命令更换端口 hexo d // commit 本地改动到github 网站浏览 个人博客地址：https://zwb0204.github.io","categories":[],"tags":[]},{"title":"QCC MDE 开发初窥(一)","slug":"QCC MDE 开发初窥(一)","date":"2020-06-24T02:21:10.236Z","updated":"2020-06-23T14:48:38.018Z","comments":true,"path":"2020/06/24/QCC MDE 开发初窥(一)/","link":"","permalink":"http://yoursite.com/2020/06/24/QCC%20MDE%20%E5%BC%80%E5%8F%91%E5%88%9D%E7%AA%A5(%E4%B8%80)/","excerpt":"","text":"QCC MDE 开发初窥(一)[TOC] 前言QCC收购CSR之后，将SDK的架构进行了大改，从ADK6.x 版本开始，使用的IDE是MDE+Toolkit ,对于基于CSR 时代的软件开发者来说，需要重新学习，我后续将QCC平台的开发心得一一阐述，节约开发者的学习成本。 开发环境安装安装包包含以下三部分,按照安装步骤安装即可： 开发包目前有两种：基于QCC512x_QCC302x芯片平台的使用ADK_QCC512x_QCC302x_WIN_6.4.2.26; 基于QCC514x_QCC304x芯片平台的使用ADK_Tookkit_1.0.1.19 + qcc514x-qcc304x-src-1-0_qtil_standard_oem_earbud.git. 开发IDE都使用MDE_WIN_2.4.1.4 Bluesuit3.3.2 注意 ：安装成功后，python的安装程序已经包含在ADK_QCC512X_QCC302X_WIN_6.4.2.26\\tools\\python27中，如果是Toolkit ,则包含在： ADK_Toolkit_1.0.1.19_x64\\tools\\python27\\，无需下载python安装包进行安装。 开发环境配置和TRBI200连线 安装完毕之后，需要在python中配置默认字体encoding为gbk, 以ADK_Toolkit_1.0.1.19为例，修改步骤如下： 在..\\ADK_Toolkit_1.0.1.19_x64\\tools\\python27\\Lib\\site-packages\\中新建文件：sitecustomize.py, 输入代码： 1234inport sys reload(sys)sys.setdefaultencoding(‘gbk’) 解决问题：如果不修改程gbk， 在log输出的时候会遇到无法解析的问题。 在工程配置文件中，需要remove 5个宏定义： ![image-20200623214923992](C:\\Users\\Harry zhang\\AppData\\Roaming\\Typora\\typora-user-images\\image-20200623214923992.png) 解决问题：如果电路中没有温度检测电路的话，运行默认程序会造成通信dead, 程序无法正常运行。 TRBI200 接口连接注意事项 TRBI200的16PIN接口分布如下图右下角所示，TRBI200中只需接四个接口中的一个接口即可，另外加TX_CLK, VCC(1.8V or 3.3V), GND 一共5pin ，速度可以达到10MHz, 判断传输通道是否OK，可以观察以下几个LEDS是否常亮: STATUS, TRB SE, TRB SE VCC。 ![image-20200623220346476](C:\\Users\\Harry zhang\\AppData\\Roaming\\Typora\\typora-user-images\\image-20200623220346476.png) 编译，烧录，输出调试信息 编译，烧录，输出调试信息全部可以通过MDE完成，步骤见下图所示，烧录的的时候注意，一定要将SYS_CTRL脚拉高hold住。 ![image-20200623222238549](C:\\Users\\Harry zhang\\AppData\\Roaming\\Typora\\typora-user-images\\image-20200623222238549.png) 更改log leve ,默认的log level 是2， 即DEBUG_LOG_LEVEL_INFO。 使用的调试输出代码格式： 1DEBUG_LOG_INFO(\"handleMessageAppInitStart\"); 如要改成其他的log level , 则在项目属性中定义宏：SET_LOG_LEVEL=x , x对应以下枚举值： 12345678typedef enum &#123; DEBUG_LOG_LEVEL_ERROR, DEBUG_LOG_LEVEL_WARN, DEBUG_LOG_LEVEL_INFO, DEBUG_LOG_LEVEL_DEBUG, DEBUG_LOG_LEVEL_VERBOSE, DEBUG_LOG_LEVEL_V_VERBOSE,&#125; debug_log_level_t; 对应的调试代码为： 123456DEBUG_LOG_ERROR(...) DEBUG_LOG_WARN(...) DEBUG_LOG_INFO(...) DEBUG_LOG_DEBUG(...) DEBUG_LOG_VERBOSE(...) DEBUG_LOG_V_VERBOSE(...) 至此，你已经可以拿到板子正常运行程序，并且进行代码调试了。","categories":[],"tags":[]}],"categories":[],"tags":[]}